{
	"name": "sas_to_parquet_using_spark",
	"properties": {
		"description": "thsi is import from databricks",
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pocdemo",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "488fd1e0-57a6-4a8b-b18c-37af0b0ace26"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/505b2bdc-ae47-42f6-8aec-7df3585952f9/resourceGroups/otpocdemo/providers/Microsoft.Synapse/workspaces/pocotdemo/bigDataPools/pocdemo",
				"name": "pocdemo",
				"type": "Spark",
				"endpoint": "https://pocotdemo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pocdemo",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "5b5753e2-7a66-4f60-983a-2242a01ec6d6"
					}
				},
				"source": [
					"   \n",
					"# Import PySpark\n",
					"import pyspark\n",
					"from pyspark.sql import SparkSession\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\n",
					"    \n",
					"if type(sqlContext) != pyspark.sql.context.HiveContext:\n",
					"    print('reset the Spark SQL context')\n",
					"    \n",
					"# *****************************************************************************\n",
					"\n",
					"\n",
					"\n",
					"#read and write required Metadata columns\n",
					"    df = spark.read.format(\"com.github.saurfang.sas.spark\").load(\"/sample_file_1.sas7bdat\", forceLowercaseNames=True, inferLong=True)\n",
					"    df.write.mode('overwrite').parquet('/sample_dataset_contents')\n",
					"    display(df)\n",
					"\n",
					"def sas_to_parquet(filelist, source, destination):\n",
					"    rows = 0\n",
					"    for i, filename in enumerate(filelist):\n",
					"     #Read sas7bdat into Spark Data frame\n",
					"     spark_df = spark.read.format(\"com.github.saurfang.sas.spark\").load(source+filename+'.sas7bdat', \n",
					"                                                                        forceLowercaseNames=True, inferLong=True)\n",
					"     #Write to Parquet File\n",
					"     spark_df.write.mode('overwrite').parquet(destination+filename)\n",
					"###################### not needed for display purposes ######################\n",
					"     data = spark.read.parquet(destination+filename)\n",
					"     display(data)\n",
					"     print(\"Schema: {}\".format(data.schema))\n",
					"###################### not needed for display purposes ######################\n",
					"sas_to_parquet(['sample_file_1','sample_file_3','sample_file_4','sample_file_2'], \n",
					"               '/mnt/nicoleblbstg/', '/mnt/nicoleblbstg/sas-to-parquet-using-spark/')\n",
					"#sas_to_parquet(['sample_file_1'], '/dbfs/mnt/nicoleblbstg/', '/mnt/nicoleblbstg/sas-to-parquet-using-spark/')    \n",
					"        "
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"application/vnd.databricks.v1+cell": {
						"title": "",
						"showTitle": false,
						"nuid": "f8a2331d-8d83-4302-9fb3-6e6ca78901f4"
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}