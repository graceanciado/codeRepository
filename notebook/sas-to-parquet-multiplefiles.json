{
	"name": "sas-to-parquet-multiplefiles",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkpool248v",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "4",
				"spark.autotune.trackingId": "0c9ca743-015e-41e9-9317-4b6765ec0c5a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/505b2bdc-ae47-42f6-8aec-7df3585952f9/resourceGroups/graceanciado/providers/Microsoft.Synapse/workspaces/otpocdemo/bigDataPools/sparkpool248v",
				"name": "sparkpool248v",
				"type": "Spark",
				"endpoint": "https://otpocdemo.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpool248v",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"import pyspark\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.types import StructType, StructField, StringType, IntegerType\r\n",
					"\r\n",
					"if type(sqlContext) != pyspark.sql.context.HiveContext:\r\n",
					"    print('reset the Spark SQL context')\r\n",
					"    \r\n",
					"# *****************************************************************************\r\n",
					"def sas_to_parquet(filelist, source, destination):\r\n",
					"    rows = 0\r\n",
					"    for i, filename in enumerate(filelist):\r\n",
					"        #Read sas7bdat into Spark Data frame\r\n",
					"        spark_df = spark.read.format(\"com.github.saurfang.sas.spark\").load(source+filename+'.sas7bdat', \r\n",
					"                                                                        forceLowercaseNames=True, inferLong=True)\r\n",
					"        #Write to Parquet File\r\n",
					"        spark_df.write.mode('overwrite').parquet(destination+filename)\r\n",
					"\r\n",
					"###################### not needed for display purposes ######################\r\n",
					"        data = spark.read.parquet(destination+filename)\r\n",
					"        display(data)\r\n",
					"        print(\"Schema: {}\".format(data.schema))\r\n",
					"\r\n",
					"###################### not needed for display purposes ######################\r\n",
					"sas_to_parquet(['sample_file_1','sample_file_3','sample_file_2'], \r\n",
					"               '/source/sas-client-samplefiles/', '/target/sas-to-parquet-using-spark/')"
				],
				"execution_count": 2
			}
		]
	}
}